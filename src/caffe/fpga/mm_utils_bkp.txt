#include "caffe/fpga/mm_utils.hpp"

// template<typename data_t, int TR, int TC, bool transp>
template<int TR, int TC, bool transp>
void TransformToFlattenTiledLayout_vec(std::vector<std::vector<float> > inputMat, std::vector<float, aligned_allocator<float>> &tiledFlatMat, int ROWS, int COLS)
{
	int rowTilesTotal = ceil((float) ROWS / (float) TR);
	int colTilesTotal = ceil((float) COLS / (float) TC);

	int flatIndex = 0;
    float val; 
    int rowIdx, colIdx; 
	if (!transp)
	{
		for (int tileRowIndex = 0; tileRowIndex < rowTilesTotal; tileRowIndex++)
		{
			for (int tileColIndex = 0; tileColIndex < colTilesTotal; tileColIndex++)
			{
				for (int i = 0; i < TR; i++)
				{
					for (int j = 0; j < TC; j++)
					{
                        rowIdx = i+tileRowIndex*TR; 
                        colIdx = j+tileColIndex*TC; 
                        if (rowIdx >= ROWS || colIdx >= COLS)
                        {
                            val = 0;      
                        }
                        else 
                        {
                            val = inputMat[rowIdx][colIdx]; 
                        }
						tiledFlatMat[flatIndex] = val;
						// tiledFlatMat[flatIndex] = inputMat[i+tileRowIndex*TR][j+tileColIndex*TC];
						flatIndex = flatIndex + 1;
					}
				}
			}
		}
	}
	else
	{
		for (int tileColIndex = 0; tileColIndex < colTilesTotal; tileColIndex++)
		{
			for (int tileRowIndex = 0; tileRowIndex < rowTilesTotal; tileRowIndex++)
			{
				for (int i = 0; i < TR; i++)
				{
					for (int j = 0; j < TC; j++)
					{
                        rowIdx = i+tileRowIndex*TR; 
                        colIdx = j+tileColIndex*TC; 
                        float val; 
                        if (rowIdx >= ROWS || colIdx >= COLS)
                        {
                            val = 0;      
                        }
                        else 
                        {
                            val = inputMat[rowIdx][colIdx]; 
                        }
						tiledFlatMat[flatIndex] = val;
						// tiledFlatMat[flatIndex] = inputMat[i+tileRowIndex*TR][j+tileColIndex*TC];
						flatIndex = flatIndex + 1;
					}
				}
			}
		}
	}
}
