#ifndef MM_UTILS_H_
#define MM_UTILS_H_

#include <vector>
#include "xcl2.hpp"
#include "math.h"

// template<int TR, int TC, bool transp>
// void TransformToFlattenTiledLayout_vec(std::vector<std::vector<float> > inputMat, std::vector<float, aligned_allocator<float>> &tiledFlatMat, int ROWS, int COLS);
void TransformToFlattenTiledLayout_vec_new(
    const float *inputMat, 
    std::vector<std::vector<float, aligned_allocator<float> > > &tiledFlatMat, 
    int ROWS, 
    int COLS, 
    int tR, 
    int tC, 
    bool transposeTiles, 
    bool transposeMat
);
void TransformToFlattenTiledLayout_vec_tmp(
    const float *inputMat, 
    float *buffer,
    int ROWS, 
    int COLS, 
    int tR, 
    int tC, 
    bool transposeTiles, 
    bool transposeMat
);

void TransformToFlattenTiledLayout_vec(
    const float *inputMat, 
    std::vector<float, aligned_allocator<float>> &tiledFlatMat, 
    int ROWS, 
    int COLS, 
    int tR, 
    int tC, 
    bool transposeTiles, 
    bool transposeMat
);

void TransformToMatrixLayoutFunc_vec(
		std::vector<float, aligned_allocator<float>> &tiledFlatMat,
		float *outputMat,
		int TR,
		int TC,
        int ROWS, 
        int COLS,
        bool transposed
);
void TransformToMatrixLayoutFunc_vec_new(
		std::vector<std::vector<float, aligned_allocator<float>>> &tiledFlatMat,
		float *outputMat,
		int TR,
		int TC,
        int ROWS, 
        int COLS,
        bool transposed
);

#endif
